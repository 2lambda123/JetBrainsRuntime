From 983a17c530f48d95cc5c48d548d991749d1d49e2 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Sat, 6 Nov 2021 19:43:35 +0100
Subject: [PATCH 38/44] Code cleanup

---
 src/hotspot/share/compiler/compileBroker.cpp             | 2 ++
 src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp          | 5 ++---
 src/hotspot/share/gc/shared/gcConfig.cpp                 | 2 +-
 src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp | 1 +
 4 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/hotspot/share/compiler/compileBroker.cpp b/src/hotspot/share/compiler/compileBroker.cpp
index 448e9b1002b..23f3a16c589 100644
--- a/src/hotspot/share/compiler/compileBroker.cpp
+++ b/src/hotspot/share/compiler/compileBroker.cpp
@@ -2872,6 +2872,8 @@ void CompileBroker::print_heapinfo(outputStream* out, const char* function, size
 }
 
 void CompileBroker::stopCompilationBeforeEnhancedRedefinition() {
+  // There are hard to fix C1/C2 race conditions with dcevm. The easiest solution
+  // is to stop compilation.
   if (AllowEnhancedClassRedefinition) {
     MonitorLockerEx locker(DcevmCompilation_lock, Mutex::_no_safepoint_check_flag);
     _compilation_stopped = true;
diff --git a/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp b/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
index e7d830979f6..58d9a6015e7 100644
--- a/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
+++ b/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
@@ -114,7 +114,7 @@ void G1FullGCCompactTask::work(uint worker_id) {
     }
   }
 
-  // TODO: (DCEV) check it
+  // TODO: (DCEVM) check it
   G1ResetHumongousClosure hc(collector()->mark_bitmap());
   G1CollectedHeap::heap()->heap_region_par_iterate_from_worker_offset(&hc, &_claimer, worker_id);
   log_task("Compaction task", worker_id, start);
@@ -146,8 +146,7 @@ void G1FullGCCompactTask::compact_region_dcevm(HeapRegion* hr, GrowableArray<Hea
 void G1FullGCCompactTask::serial_compaction_dcevm() {
   GCTraceTime(Debug, gc, phases) tm("Phase 4: Serial Compaction", collector()->scope()->timer());
 
-  // compact remaining, not parallel compacted rescued oops using serial compact point
-
+  // Clear allocated resources at compact points now, since all rescued oops are copied to destination.
   for (uint i = 0; i < collector()->workers(); i++) {
     G1FullGCCompactionPoint* cp = collector()->compaction_point(i);
     DcevmSharedGC::clear_rescued_objects_heap(cp->rescued_oops_values());
diff --git a/src/hotspot/share/gc/shared/gcConfig.cpp b/src/hotspot/share/gc/shared/gcConfig.cpp
index aea0ae3759f..c056e564fa3 100644
--- a/src/hotspot/share/gc/shared/gcConfig.cpp
+++ b/src/hotspot/share/gc/shared/gcConfig.cpp
@@ -107,7 +107,7 @@ void GCConfig::fail_if_unsupported_gc_is_selected() {
 
 void GCConfig::select_gc_ergonomically() {
   if (AllowEnhancedClassRedefinition && !UseConcMarkSweepGC && !UseSerialGC) {
-    // Enhanced class redefinition only supports serial GC at the moment
+    // (DCEVM) use G1 as default GC in Enhanced class redefinition
     FLAG_SET_ERGO(bool, UseG1GC, true);
   } else if (os::is_server_class_machine()) {
 #if INCLUDE_G1GC
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index 1e63561064a..ee6e6f1d8d5 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -548,6 +548,7 @@ void VM_EnhancedRedefineClasses::doit() {
       if (log_is_enabled(Info, redefine, class, timer)) {
         _timer_heap_iterate.start();
       }
+      // returns after the iteration is finished
       G1CollectedHeap::heap()->object_par_iterate(&objectClosure);
       _timer_heap_iterate.stop();
     } else {
-- 
2.23.0

