apply plugin: 'java'
import org.gradle.internal.os.OperatingSystem

repositories {
    mavenCentral()
}

def test_jvm = {
    if (project.hasProperty('jbsdkhome')) {
        file(jbsdkhome + (OperatingSystem.current().isWindows()?"/bin/java.exe" : "/bin/java")).absolutePath
    } else {
        if (OperatingSystem.current().isMacOsX()) {
            file('../../../build/macosx-x86_64-normal-server-release/images/jdk-bundle/jdk-11.jdk/Contents/Home/bin/java').absolutePath
        } else if (OperatingSystem.current().isLinux()) {
            file('../../../build/linux-x86_64-normal-server-release/images/jdk/bin/java').absolutePath
        } else {
            file('../../../build/windows-x86_64-normal-server-release/images/j2sdk-image/bin/java.exe').absolutePath
        }
    }
}

dependencies {
    testCompile('junit:junit:4.12'){
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'net.java.dev.jna:jna:4.4.0'
    testCompile 'com.twelvemonkeys.imageio:imageio-tiff:3.3.2'
    testCompile 'org.apache.commons:commons-lang3:3.0'
}

def jdk_modules = ["java.base", "java.logging", "java.prefs",
               "java.se.ee", "java.sql", "java.datatransfer",
               "java.management", "java.rmi", "java.security.jgss",
               "java.sql.rowset", "java.desktop", "java.management.rmi",
               "java.scripting", "java.security.sasl", "java.transaction",
               "java.instrument", "java.naming", "java.se",
               "java.smartcardio", "java.xml.crypto"]

def jdk_class_dirs = []

jdk_modules.collect(jdk_class_dirs) {
    new File("../../../src/" + it + "/share/classes")
}

if (OperatingSystem.current().isMacOsX())
    jdk_modules.collect(jdk_class_dirs) {
        "../../../src/" + it + "/macosx/classes"
    }
else if (OperatingSystem.current().isLinux())
    jdk_modules.collect(jdk_class_dirs) {
        "../../../src/" + it + "/solaris/classes"
    }
else
    jdk_modules.collect(jdk_class_dirs) {
        "../../../src/" + it + "/windows/classes"
    }

sourceSets.main.java.srcDirs = jdk_class_dirs

def buildDir = project.buildscript.sourceFile.parentFile.parentFile.parentFile.parentFile

def make_cmd = "make"
if (OperatingSystem.current().isWindows()) {
    def cyg_make_cmd = new File("c:/cygwin64/bin/make.exe")
    if (cyg_make_cmd.exists()) make_cmd = cyg_make_cmd.absolutePath
}

task make_images << {
    def pb = new ProcessBuilder().command(make_cmd.toString(), "-C", buildDir.absolutePath, "images")
    def proc = pb.redirectErrorStream(true).start()
    proc.inputStream.eachLine {println it}
    assert proc.waitFor() == 0
}

task make_clean << {
    def pb = new ProcessBuilder().command(make_cmd.toString(), "-C", buildDir.absolutePath, "clean")
    def proc = pb.redirectErrorStream(true).start()
    proc.inputStream.eachLine {println it}
    assert proc.waitFor() == 0
}


tasks.compileJava.enabled = false
classes.dependsOn.clear()
classes.dependsOn tasks.make_images
tasks.cleanClasses.dependsOn tasks.make_clean
